#              –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
# with open('output.txt', 'w', encoding='utf-8') as file:
#     file.write(input())




#              –°–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞
# from random import randint
#
# with open('random.txt', 'w', encoding='utf-8') as output:
#     for _ in range(25):
#         print(str(randint(111, 777)), file=output)




#              –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
# with open('input.txt', 'r') as input, open('output.txt', 'w') as output:
#     content = input.readlines()
#     for n, string in enumerate(content):
#         output.write(f'{n + 1}) {string}')





#             –ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ –ù–æ–≤—ã–π –ì–æ–¥
# with open('class_scores.txt', 'r', encoding='utf-8') as input, open('new_scores.txt', 'w', encoding='utf-8') as output:
#     content = [(el.strip() for el in line.split()) for line in input.readlines()]
#     for (name, score) in content:
#         if int(score) > 95:
#             output.write(f'{name} 100\n')
#         else:
#             output.write(f'{name} {str(int(score) + 5)}\n')




#              –ó–∞–≥–∞–¥–∫–∞ –æ—Ç –ñ–∞–∫–∞ –§—Ä–µ—Å–∫–æ
# with open('goats.txt', 'r', encoding='utf-8') as input, open('answer.txt', 'w', encoding='utf-8') as output:
#     content = [line.replace('\n', '') for line in input.readlines()]
#     content.remove('COLOURS')
#     colours = {}
#     for line in content:
#         if line == 'GOATS':
#             break
#         colours.setdefault(line, 0)
#     for el in content[content.index('GOATS') + 1:]:
#         colours[el] += 1
#     result = list(filter(lambda para: para[1] > 7, colours.items()))
#     for el in result:
#         output.write(el[0] + '\n')




#              –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
# with open('output.txt', 'a', encoding='utf-8') as output:
#     for _ in range(int(input())):
#         with open(input(), 'r', encoding='utf-8') as file:
#             output.writelines(file.readlines())






#            –õ–æ–≥ —Ñ–∞–π–ª
# –†–µ—à–µ–Ω–∏–µ –°–∞–Ω–∂–∞—Ä–∞ –ê–±–¥—É–ª–ª–∞–µ–≤–∞:
# from datetime import datetime
#
# with open('logfile.txt', encoding='utf-8') as logfile, open('output.txt', 'w') as output:
#     for log in logfile.read().split('\n'):
#         name, first_time, second_time = log.split(', ')
#         delta = datetime.strptime(second_time, "%H:%M") - datetime.strptime(first_time, "%H:%M")
#         if delta.seconds >= 3600:
#             print(name, file=output)


# –ú–æ–µ —Ä–µ—à–µ–Ω–∏–µ:
# def time_in_minutes(time):
#     hours, minutes = map(int, time.split(':'))
#     return hours * 60 + minutes
#
# with open('logfile.txt', 'r', encoding='utf-8') as file1, open('output.txt', 'w', encoding='utf-8') as file2:
#     content = [line.strip() for line in file1.readlines()]
#     for line in content:
#         name, time1, time2 = line.split(', ')
#         if time_in_minutes(time2) - time_in_minutes(time1) >= 60:
#             file2.write(f'{name}\n')



#            –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
# with open('ledger.txt', 'r') as file:
#     content = [int(line.replace('$', '').strip()) for line in file.readlines()]
#     print(f'${sum(content)}')



            # Goooood students
# with open('grades.txt', 'r', encoding='utf-8') as file:
#     content = [[el.strip() for el in line.split()] for line in file.readlines()]
#     count = 0
#     for line in content:
#         if all([bool(int(el) >= 65) for el in line[1:]]):
#             count += 1
#     print(count)
#




            # –°–∞–º–æ–µ –¥–ª–∏–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —Ñ–∞–π–ª–µ
# with open('words.txt', 'r', encoding='utf-8') as file:
#     content = [word for word in file.read().split()]
#     max_len = len(max(content, key=len))
#     print(*filter(lambda x: len(x) == max_len, content), sep='\n')





#           Tail of a File
# with open(input(), 'r', encoding='utf-8') as file:
#     content = [line.strip() for line in file.readlines()]
#     if len(content) <= 10:
#         print(*content, sep='\n')
#     else:
#         print(*content[-10:], sep='\n')




                # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è üå∂Ô∏è
# d = { '–∞': 'a', '–∫': 'k', '—Ö': 'h', '–±': 'b', '–ª': 'l', '—Ü': 'c', '–≤': 'v', '–º': 'm', '—á': 'ch', '–≥': 'g', '–Ω': 'n', '—à': 'sh', '–¥': 'd', '–æ': 'o', '—â': 'shh', '–µ': 'e', '–ø': 'p', '—ä': '*', '—ë': 'jo', '—Ä': 'r', '—ã': 'y', '–∂': 'zh', '—Å': 's', '—å': "'", '–∑': 'z', '—Ç': 't', '—ç': 'je', '–∏': 'i', '—É': 'u', '—é': 'ju', '–π': 'j', '—Ñ': 'f', '—è': 'ya', '–ê': 'A', '–ö': 'K', '–•': 'H', '–ë': 'B', '–õ': 'L', '–¶': 'C', '–í': 'V', '–ú': 'M', '–ß': 'Ch', '–ì': 'G', '–ù': 'N', '–®': 'Sh', '–î': 'D', '–û': 'O', '–©': 'Shh', '–ï': 'E', '–ü': 'P', '–™': '*', '–Å': 'Jo', '–†': 'R', '–´': 'Y', '–ñ': 'Zh', '–°': 'S', '–¨': "'", '–ó': 'Z', '–¢': 'T', '–≠': 'Je', '–ò': 'I', '–£': 'U', '–Æ': 'Ju', '–ô': 'J', '–§': 'F', '–Ø': 'Ya' }
#
# with open('cyrillic.txt', 'r', encoding='utf-8') as file1, open('transliteration.txt', 'w', encoding='utf-8') as file2:
#     content = file1.read()
#     for char in content:
#         if char in d:
#             file2.write(d[char])
#         else:
#             file2.write(char)



#             –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç—ã üå∂Ô∏è
# with open(input(), 'r') as file:
#     content = file.readlines()
#     without_name = []
#     for i in range(len(content)):
#         if content[i].startswith('def'):
#             if content[i - 1].startswith('#'):
#                 continue
#             else:
#                 without_name.append(content[i][4: content[i].index('(')])
#     if without_name:
#         print(*without_name, sep='\n')
#     else:
#         print('Best Programming Team')